/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import e from "prop-types";
import { getPageMargin as i } from "../getPageMargin.mjs";
import { savePDF as a } from "../savePDF.mjs";
import { provideSaveGridPDF as p } from "./provideSaveGridPDF.mjs";
const n = class n extends t.Component {
  constructor(r) {
    super(r), this.saveGridPDF = p(this.getSavePDF());
  }
  /**
   * @hidden
   */
  render() {
    return null;
  }
  /* eslint-disable max-len */
  /**
   * Saves the content of the Grid as a PDF file.
   *
   * @param data - The data can be different from the currently displayed data in the Grid. Can be used to export all Grid pages.
   * @param callback - The callback that will be executed after the PDF is saved.
   */
  // tslint:enable:max-line-length
  save(r, o) {
    this.saveGridPDF(
      this.getGrid(),
      Object.assign({}, this.props, { margin: i(this.props) }),
      o,
      r,
      this.getCustomColumns()
    );
  }
  getSavePDF() {
    return a;
  }
  getGrid() {
    return t.Children.toArray(this.props.children).find((r) => r && r.type.displayName === "KendoReactGrid");
  }
  getCustomColumns() {
    return t.Children.toArray(this.props.children).filter((r) => r && r.type.displayName === "KendoReactGridColumn");
  }
};
n.propTypes = {
  author: e.string,
  avoidLinks: e.oneOfType([e.bool, e.string]),
  forcePageBreak: e.string,
  keepTogether: e.string,
  creator: e.string,
  date: e.instanceOf(Date),
  imageResolution: e.number,
  fileName: e.string,
  forceProxy: e.bool,
  keywords: e.string,
  landscape: e.bool,
  margin: e.oneOfType([e.string, e.number, e.shape({
    left: e.oneOfType([e.number, e.string]),
    top: e.oneOfType([e.number, e.string]),
    right: e.oneOfType([e.number, e.string]),
    bottom: e.oneOfType([e.number, e.string])
  })]),
  pageTemplate: e.any,
  paperSize: e.any,
  repeatHeaders: e.bool,
  scale: e.number,
  proxyData: e.any,
  proxyURL: e.string,
  proxyTarget: e.string,
  producer: e.string,
  subject: e.string,
  title: e.string
};
let s = n;
export {
  s as GridPDFExport
};
