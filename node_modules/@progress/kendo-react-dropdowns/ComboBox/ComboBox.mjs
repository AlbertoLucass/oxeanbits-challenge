/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as u from "react";
import f from "prop-types";
import B from "../common/DropDownBase.mjs";
import { Keys as x, validatePackage as ie, svgIconPropType as oe, canUseDOM as z, classNames as E, IconWrap as ae, createPropsContext as ne, withIdHOC as le, withPropsContext as re, kendoThemeMaps as de } from "@progress/kendo-react-common";
import { FloatingLabel as pe } from "@progress/kendo-react-labels";
import { areSame as C, getItemValue as S, isPresent as k, getItemIndexByText as A, suggestValue as he, itemIndexStartsWith as K } from "../common/utils.mjs";
import ue from "../common/SearchBar.mjs";
import ce from "../common/ListContainer.mjs";
import ge from "../common/List.mjs";
import me from "../common/ListFilter.mjs";
import H from "../common/GroupStickyHeader.mjs";
import { packageMetadata as ve } from "../package-metadata.mjs";
import fe from "../common/ClearButton.mjs";
import { Button as q } from "@progress/kendo-react-buttons";
import { caretAltDownIcon as be, xIcon as xe } from "@progress/kendo-svg-icons";
import { comboArrowBtnAriaLabelExpand as W, messages as $, comboArrowBtnAriaLabelCollapse as G } from "../messages/index.mjs";
import { provideLocalizationService as U } from "@progress/kendo-react-intl";
import { ActionSheet as Ie, ActionSheetHeader as ye, ActionSheetContent as ke } from "@progress/kendo-react-layout";
import { MOBILE_MEDIUM_DEVISE as D, MOBILE_SMALL_DEVISE as j } from "../common/constants.mjs";
import Y from "../common/withCustomComponent.mjs";
const Ce = "Please enter a valid value!", { sizeMap: V, roundedMap: Se } = de, w = class w extends u.Component {
  constructor(s) {
    super(s), this.state = {}, this.base = new B(this), this._element = null, this._suggested = "", this._skipBlur = !1, this._input = null, this._adaptiveFilterInput = null, this.itemHeight = 0, this.focus = () => {
      this._input && this._input.focus();
    }, this.handleItemSelect = (e, t) => {
      const { data: n = [], virtual: i, dataItemKey: l } = this.props, d = i ? i.skip : 0, a = n[e - d], r = !C(a, this.value, l);
      this.triggerOnChange(a, t), this.state.text !== void 0 && (t.data.text = void 0), r && this.base.triggerPageChangeCornerItems(a, t);
    }, this.onPopupOpened = () => {
      setTimeout(() => {
        this.mobileMode && this._adaptiveFilterInput && (this._skipBlur = !0, this._adaptiveFilterInput.focus(), this._skipBlur = !1);
      }, 300);
    }, this.componentRef = (e) => {
      this._element = e, this.base.wrapper = e;
    }, this.toggleBtnClick = (e) => {
      const { data: t = [], skipDisabledItems: n, textField: i } = this.props, l = this.getFocusedIndex(), d = this.getCurrentValueDisabledStatus(i, t, l), a = this.props.opened !== void 0 ? this.props.opened : this.state.opened, r = this.base.initState();
      if (r.syntheticEvent = e, !n && i && d && this.clearValueOnToggleBtnClick(e), this.base.togglePopup(r), !a && this.mobileMode) {
        const o = this.props.adaptiveFilter !== void 0 ? this.props.adaptiveFilter : this.state.text || null;
        this.base.filterChanged(o, r);
      }
      this.applyState(r);
    }, this.renderMobileListFilter = () => {
      const e = this.props.adaptiveFilter !== void 0 ? this.props.adaptiveFilter : this.state.text, t = S(this.value, this.props.textField), n = k(e) ? e : t;
      return /* @__PURE__ */ u.createElement(
        me,
        {
          value: n,
          ref: (i) => this._adaptiveFilterInput = i && i.element,
          onChange: this.handleMobileFilterChange,
          onKeyDown: this.onInputKeyDown,
          size: this.props.size,
          rounded: this.props.rounded,
          fillMode: this.props.fillMode
        }
      );
    }, this.handleMobileFilterChange = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e.syntheticEvent, t.data.text = e.target.value, this.base.filterChanged(e.target.value, t), this.applyState(t);
    }, this.onScroll = (e) => {
      const { vs: t, list: n } = this.base;
      t.scrollHandler(e);
      const { groupField: i } = this.props;
      let { data: l = [] } = this.props;
      if (!i || !l.length)
        return;
      const d = this.itemHeight = this.itemHeight || (t.enabled ? t.itemHeight : n ? n.children[0].offsetHeight : 0), r = e.target.scrollTop - t.skip * d;
      this.props.groupMode === "modern" && (l = this.base.getGroupedDataModernMode(l, i));
      let o = l[0][i];
      for (let h = 1; h < l.length && !(d * h > r); h++)
        l[h] && l[h][i] && (o = l[h][i]);
      o !== this.state.group && (this.setState({
        group: o
      }), this.props.onGroupScroll && this.props.onGroupScroll.call(void 0, { group: o }));
    }, this.handleItemClick = (e, t) => {
      this.base.handleItemClick(e, t), this._valueDuringOnChange = void 0;
    }, this.handleBlur = (e) => {
      if (this.state.focused && !this._skipBlur) {
        const t = this.base.initState(), { textField: n, data: i = [] } = this.props, l = this.getFocusedIndex(), a = !(l === -1) && this.getCurrentValueDisabledStatus(n, i, l);
        t.data.focused = !1, t.events.push({ type: "onBlur" }), t.syntheticEvent = e, n && a && this.clearValueOnBlur(e), this.applyValueOnRejectSuggestions(e.currentTarget.value, t);
      }
    }, this.onInputClick = (e) => {
      const t = this.props.opened !== void 0 ? this.props.opened : this.state.opened, n = this.props.adaptiveFilter !== void 0 ? this.props.adaptiveFilter : this.state.text || null;
      if (!t && this.mobileMode) {
        const i = this.base.initState();
        i.syntheticEvent = e, this.base.togglePopup(i), this.base.filterChanged(n, i), this.applyState(i);
      }
    }, this.onInputKeyDown = (e) => {
      const { data: t = [], skipDisabledItems: n, textField: i, dataItemKey: l, groupField: d } = this.props, a = this.value, r = Math.max(0, t.findIndex((c) => C(c, a, l))), o = e.keyCode, h = this.props.opened !== void 0 ? this.props.opened : this.state.opened, p = this.base.initState();
      if (p.syntheticEvent = e, !e.altKey && (o === x.up || o === x.down)) {
        if (e.preventDefault(), d !== "" && i)
          if (!this.props.skipDisabledItems && h)
            this.onNavigate(p, o);
          else {
            let c = 0;
            if (o === x.down || o === x.right) {
              const m = t.slice(r + 1 < t.length ? r + 1 : r).find((b) => !b.disabled && b[i]);
              c = m && t.findIndex((b) => b[i] === m[i]);
            } else if (o === x.up || o === x.left) {
              let m;
              if (r === 0)
                m = t, c = t.findIndex((b) => !b.disabled && b[i]);
              else {
                m = t.slice(0, r);
                let b = m.pop();
                for (; b && b.disabled; )
                  b = m.pop();
                c = b && t.findIndex((F) => F[i] === b[i]);
              }
            }
            if (c !== void 0) {
              const m = c - r;
              this.onNavigate(p, o, m);
            } else
              c === void 0 && t.findIndex((m) => m[i] === a[i]) === t.length - 1 && this.onNavigate(p, o);
          }
        else if (!this.props.skipDisabledItems && h)
          this.onNavigate(p, o);
        else {
          let c = null;
          if (o === x.down || o === x.right)
            c = t.slice(r + 1).find((m) => !m.disabled);
          else if (o === x.up || o === x.left) {
            const m = t.slice(0, r);
            for (c = m.pop(); c && c.disabled; )
              c = m.pop();
          }
          if (c) {
            const m = c.id - r - 1;
            this.onNavigate(p, o, m);
          } else
            this.onNavigate(p, o);
        }
        this.applyState(p);
      }
      const g = () => {
        e.preventDefault(), this.base.togglePopup(p), this.applyState(p);
      }, I = this.getFocusedIndex(), v = I === -1, y = !v && this.getCurrentValueDisabledStatus(i, t, I);
      h ? o === x.pageUp ? this.base.scrollPopupByPageSize(-1) : o === x.pageDown ? this.base.scrollPopupByPageSize(1) : e.altKey && o === x.up ? g() : o === x.enter ? (e.preventDefault(), (i && !v && e.currentTarget.value ? t[I][i] : void 0) ? !n && i && y ? this.clearValueOnEnterOrEsc(e) : y || this.applyValueOnEnter(e.currentTarget.value, p) : this.applyValueOnEnter(e.currentTarget.value, p)) : o === x.esc && (!n && i && y && this.clearValueOnEnterOrEsc(e), this.applyValueOnRejectSuggestions(e.currentTarget.value, p)) : !h && o === x.esc ? this.clearValueOnEnterOrEsc(e) : e.altKey && o === x.down && g();
    }, this.inputOnChange = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e;
      const n = this.props.opened !== void 0 ? this.props.opened : this.state.opened, i = e.currentTarget, l = i.value;
      if (this.props.suggest) {
        const d = i.selectionEnd === l.length;
        let a = this.props.filter !== void 0 ? this.props.filter : this.state.text;
        k(a) || (a = S(this.value, this.props.textField) || "");
        const r = a && a === l, o = a && a.length > l.length;
        r || o || !d ? this._suggested = "" : this.suggestValue(l);
      }
      this.props.filter === void 0 && (t.data.text = l), this.state.focusedItem !== void 0 && (t.data.focusedItem = void 0), n || this.base.togglePopup(t), this.base.filterChanged(l, t), this.applyState(t), this.setState({ group: void 0 });
    }, this.clearButtonClick = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e, e.stopPropagation(), this.clearValue();
    }, this.clearValueOnEnterOrEsc = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e, e.stopPropagation(), this.clearValue();
    }, this.clearValueOnBlur = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e, e.stopPropagation(), this.clearValue();
    }, this.clearValueOnToggleBtnClick = (e) => {
      const t = this.base.initState();
      t.syntheticEvent = e, e.stopPropagation(), this.clearValue();
    }, this.setValidity = () => {
      this._input && this._input.setCustomValidity && this._input.setCustomValidity(
        this.validity.valid ? "" : this.props.validationMessage || Ce
      );
    }, ie(ve);
  }
  get _inputId() {
    return this.props.id;
  }
  get document() {
    if (z)
      return this.element && this.element.ownerDocument || document;
  }
  /** @hidden */
  get element() {
    return this._element;
  }
  /**
   * The mobile mode of the ComboBox.
   */
  get mobileMode() {
    return !!(this.state.windowWidth && this.state.windowWidth <= D && this.props.adaptive);
  }
  /**
   * The value of the ComboBox.
   */
  get value() {
    if (this._valueDuringOnChange !== void 0)
      return this._valueDuringOnChange;
    if (this.props.value !== void 0)
      return this.props.value;
    if (this.state.value !== void 0)
      return this.state.value;
    if (this.props.defaultValue !== void 0)
      return this.props.defaultValue;
  }
  /**
   * The index of the selected item.
   */
  get index() {
    const { data: s = [], dataItemKey: e } = this.props, t = this.value;
    return s.findIndex((n) => C(n, t, e));
  }
  /**
   * Gets the `name` property of the ComboBox.
   */
  get name() {
    return this.props.name;
  }
  /**
   * Represents the validity state into which the component is set.
   */
  get validity() {
    const s = this.props.validationMessage !== void 0, e = !this.required || this.value !== null && this.value !== "" && this.value !== void 0, t = this.props.valid !== void 0 ? this.props.valid : e;
    return {
      customError: s,
      valid: t,
      valueMissing: this.value === null
    };
  }
  get validityStyles() {
    return this.props.validityStyles !== void 0 ? this.props.validityStyles : w.defaultProps.validityStyles;
  }
  /** @hidden */
  get required() {
    return this.props.required !== void 0 ? this.props.required : w.defaultProps.required;
  }
  /** @hidden */
  componentDidUpdate(s, e) {
    var g;
    const { dataItemKey: t, virtual: n, groupField: i = "", data: l = [], textField: d } = this.props, a = s.virtual ? s.virtual.total : 0, r = this.props.opened !== void 0 ? this.props.opened : this.state.opened, o = s.opened !== void 0 ? s.opened : e.opened, h = !o && r, p = this.value;
    if (this._valueOnDidUpdate = p, n && n.total !== a)
      this.base.vs.calcScrollElementHeight(), this.base.vs.reset();
    else {
      const I = s.value !== void 0 ? s.value : e.value;
      let v = l.findIndex((c) => C(c, p, t));
      this.props.groupMode === "modern" && d && p && (v = (g = this.base.getGroupedDataModernMode(l, i)) == null ? void 0 : g.map((c) => c[d]).indexOf(p[d]));
      const y = !C(I, p, t);
      h && n ? this.base.scrollToVirtualItem(n, v) : h && !n ? (this.onPopupOpened(), l && l.length !== 0 && this.base.resetGroupStickyHeader(l[0][i], this), this.base.scrollToItem(v)) : r && o && p && y && this.base.scrollToItem(v);
    }
    h && this._input && this._input.focus(), this.setValidity();
  }
  /** @hidden */
  componentDidMount() {
    var s;
    this.observerResize = z && window.ResizeObserver && new window.ResizeObserver(this.calculateMedia.bind(this)), this.base.didMount(), this.setValidity(), (s = this.document) != null && s.body && this.observerResize && this.observerResize.observe(this.document.body);
  }
  /** @hidden */
  componentWillUnmount() {
    var s;
    (s = this.document) != null && s.body && this.observerResize && this.observerResize.disconnect();
  }
  /** @hidden */
  render() {
    const s = U(this).toLanguageString(W, $[W]), e = U(this).toLanguageString(
      G,
      $[G]
    ), {
      dir: t,
      disabled: n,
      clearButton: i = w.defaultProps.clearButton,
      label: l,
      textField: d,
      adaptive: a,
      className: r,
      style: o,
      loading: h,
      iconClassName: p,
      virtual: g,
      size: I,
      rounded: v,
      fillMode: y,
      opened: c = this.state.opened,
      placeholder: m,
      svgIcon: b
    } = this.props, { windowWidth: F = 0 } = this.state, _ = !this.validityStyles || this.validity.valid, P = this.props.filter !== void 0 ? this.props.filter : this.state.text, J = S(this.value, d), O = k(P) ? P : J, Q = i && (!!O || k(this.value)), M = this.base.vs, N = this.props.id || this._inputId, L = F <= D && a;
    M.enabled = g !== void 0, g !== void 0 && (M.skip = g.skip, M.total = g.total, M.pageSize = g.pageSize);
    const [X, Z] = Y(this.props.prefix || u.Fragment), [ee, te] = Y(this.props.suffix || u.Fragment), R = /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "span",
      {
        className: E(
          "k-combobox k-input",
          {
            [`k-input-${V[I] || I}`]: I,
            [`k-rounded-${Se[v] || v}`]: v,
            [`k-input-${y}`]: y,
            "k-invalid": !_,
            "k-loading": h,
            "k-required": this.required,
            "k-disabled": n
          },
          r
        ),
        ref: this.componentRef,
        style: l ? { ...o, width: void 0 } : o,
        dir: t
      },
      this.props.prefix && /* @__PURE__ */ u.createElement(X, { ...Z }),
      this.renderSearchBar(O || "", N, m),
      Q && !h && /* @__PURE__ */ u.createElement(fe, { onClick: this.clearButtonClick, key: "clearbutton" }),
      h && /* @__PURE__ */ u.createElement(ae, { className: "k-input-loading-icon", name: "loading", key: "loading" }),
      this.props.suffix && /* @__PURE__ */ u.createElement(ee, { ...te }),
      /* @__PURE__ */ u.createElement(
        q,
        {
          tabIndex: -1,
          type: "button",
          "aria-label": c ? e : s,
          icon: p ? void 0 : "caret-alt-down",
          svgIcon: b || be,
          iconClass: p,
          size: I,
          fillMode: y,
          rounded: null,
          themeColor: "base",
          className: "k-input-button",
          onClick: this.toggleBtnClick,
          onMouseDown: (se) => se.preventDefault()
        }
      ),
      !L && this.renderListContainer()
    ), L && this.renderAdaptiveListContainer());
    return l ? /* @__PURE__ */ u.createElement(
      pe,
      {
        label: l,
        editorId: N,
        editorValue: O,
        editorValid: _,
        editorDisabled: n,
        style: { width: o ? o.width : void 0 },
        children: R
      }
    ) : R;
  }
  /** @hidden */
  onNavigate(s, e, t) {
    const { data: n = [], virtual: i = { skip: 0 } } = this.props, l = this.props.filter ? this.props.filter : this.state.text, d = this.getFocusedIndex(), a = this.base.vs, r = this.value;
    if (this._suggested = "", d !== -1 && !k(r))
      this.handleItemSelect(d, s);
    else if (l === "")
      this.handleItemSelect(0, s);
    else {
      const o = i.skip + d, h = this.base.navigation.navigate({
        keyCode: e,
        current: o,
        max: (a.enabled ? a.total : n.length) - 1,
        min: 0,
        skipItems: t || void 0
      });
      h !== void 0 && this.handleItemSelect(h, s);
    }
  }
  getCurrentValueDisabledStatus(s, e, t) {
    return s && e && e[t] && e[t].disabled;
  }
  applyValueOnEnter(s, e) {
    const { data: t = [], textField: n, allowCustom: i } = this.props, l = this.props.opened !== void 0 ? this.props.opened : this.state.opened, a = S(this.value, n) === s ? this.index : A(t, s, n), r = a !== -1;
    let o;
    if (this._suggested = "", r)
      o = t[a];
    else if (i)
      o = n !== void 0 ? { [n]: s } : s;
    else
      return this.selectFocusedItem(s, e);
    this.triggerOnChange(o, e), l && this.base.togglePopup(e), this.props.filter === void 0 && this.state.text !== void 0 && (e.data.text = void 0), this.applyState(e);
  }
  applyValueOnRejectSuggestions(s, e) {
    const { data: t = [], textField: n, allowCustom: i } = this.props, l = this.props.opened !== void 0 ? this.props.opened : this.state.opened, d = S(this.value, n), a = this.state.windowWidth && this.state.windowWidth <= D;
    if (this._suggested = "", s === d || s === "" && !k(d))
      return l && !a && this.base.togglePopup(e), this.applyState(e);
    const r = A(t, s, n, !0), o = r !== -1;
    let h = null;
    o ? h = t[r] : i && (h = s ? n ? { [n]: s } : s : null), this.triggerOnChange(h, e), this.state.text !== void 0 && (e.data.text = void 0, this.base.filterChanged("", e)), l && !a && this.base.togglePopup(e), this.applyState(e);
  }
  selectFocusedItem(s, e) {
    const t = this.props.opened !== void 0 ? this.props.opened : this.state.opened, { data: n = [], textField: i, virtual: l = { skip: 0 }, focusedItemIndex: d = K } = this.props, a = l.skip, r = s === "" && a === 0 ? 0 : d(n, s, i);
    return r !== -1 ? this.handleItemSelect(r + a, e) : (this.triggerOnChange(null, e), this.state.text !== void 0 && (e.data.text = void 0)), t && this.base.togglePopup(e), this.applyState(e);
  }
  renderAdaptiveListContainer() {
    const { windowWidth: s = 0 } = this.state, { header: e, footer: t, size: n, data: i = [], groupField: l, groupMode: d, list: a, virtual: r, adaptiveTitle: o, groupStickyHeaderItemRender: h } = this.props, p = this.props.opened !== void 0 ? this.props.opened : this.state.opened;
    let { group: g } = this.state;
    g === void 0 && l !== void 0 && (g = S(i[0], l));
    const I = {
      navigatable: !1,
      navigatableElements: [],
      expand: p,
      animation: !0,
      onClose: (v) => this.toggleBtnClick(v),
      animationStyles: s <= j ? { top: 0, width: "100%", height: "100%" } : void 0,
      className: s <= j ? "k-adaptive-actionsheet k-actionsheet-fullscreen" : "k-adaptive-actionsheet k-actionsheet-bottom"
    };
    return /* @__PURE__ */ u.createElement(Ie, { ...I }, /* @__PURE__ */ u.createElement(ye, { className: "k-text-center" }, /* @__PURE__ */ u.createElement("div", { className: "k-actionsheet-titlebar-group k-hbox" }, /* @__PURE__ */ u.createElement("div", { className: "k-actionsheet-title" }, /* @__PURE__ */ u.createElement("div", null, o)), /* @__PURE__ */ u.createElement("div", { className: "k-actionsheet-actions" }, /* @__PURE__ */ u.createElement(
      q,
      {
        tabIndex: 0,
        "aria-label": "Cancel",
        "aria-disabled": "false",
        type: "button",
        fillMode: "flat",
        onClick: this.toggleBtnClick,
        icon: "x",
        svgIcon: xe
      }
    ))), /* @__PURE__ */ u.createElement("div", { className: "k-actionsheet-titlebar-group k-actionsheet-filter" }, this.renderMobileListFilter())), /* @__PURE__ */ u.createElement(ke, { className: "!k-overflow-hidden" }, /* @__PURE__ */ u.createElement("div", { className: "k-list-container" }, /* @__PURE__ */ u.createElement("div", { className: E(
      {
        "k-list": !a,
        "k-list-lg": !0,
        "k-virtual-list": r,
        "k-data-table": a,
        [`k-table-${V[n] || n}`]: a && n
      }
    ) }, e && /* @__PURE__ */ u.createElement("div", { className: "k-table-header" }, e), !a && g && i.length !== 0 && /* @__PURE__ */ u.createElement(H, { group: g, groupMode: d, render: h }), this.renderList(), t && /* @__PURE__ */ u.createElement("div", { className: "k-list-footer" }, t)))));
  }
  renderListContainer() {
    const s = this.base, { dir: e, header: t, footer: n, data: i = [], groupField: l, groupMode: d, size: a, list: r, virtual: o, groupStickyHeaderItemRender: h } = this.props, p = this.props.opened !== void 0 ? this.props.opened : this.state.opened, g = s.getPopupSettings(), I = g.width !== void 0 ? g.width : s.popupWidth;
    let { group: v } = this.state;
    return v === void 0 && l !== void 0 && (v = S(i[0], l)), /* @__PURE__ */ u.createElement(
      ce,
      {
        width: I,
        popupSettings: {
          ...g,
          anchor: g.anchor || this.element,
          show: p,
          popupClass: E(
            g.popupClass,
            "k-list-container",
            "k-combobox-popup"
          )
        },
        dir: e !== void 0 ? e : this.base.dirCalculated,
        itemsCount: [i.length]
      },
      /* @__PURE__ */ u.createElement("div", { className: E(
        {
          "k-list": !r,
          [`k-list-${V[a] || a}`]: !r && a,
          "k-virtual-list": o,
          "k-data-table": r,
          [`k-table-${V[a] || a}`]: r && a
        }
      ) }, t && /* @__PURE__ */ u.createElement("div", { className: "k-table-header" }, t), !r && v && i.length !== 0 && /* @__PURE__ */ u.createElement(H, { group: v, groupMode: d, render: h }), this.renderList(), n && /* @__PURE__ */ u.createElement("div", { className: E(
        {
          "k-list-footer": !this.props.footerClassName
        },
        this.props.footerClassName
      ) }, n))
    );
  }
  renderList() {
    const s = this.base, {
      textField: e,
      dataItemKey: t,
      listNoDataRender: n,
      itemRender: i,
      groupHeaderItemRender: l,
      data: d = [],
      virtual: a = { skip: 0, total: void 0 }
    } = this.props, r = s.getPopupSettings(), o = s.vs, h = a.skip, p = this.props.opened !== void 0 ? this.props.opened : this.state.opened, g = `translateY(${o.translate}px)`, I = p ? this.getFocusedIndex() : void 0, v = this.props.filter !== void 0 ? this.props.filter : this.state.text, y = S(this.value, e), c = k(v) && v !== y ? null : this.value, m = this.props.list || ge;
    return /* @__PURE__ */ u.createElement(
      m,
      {
        id: s.listBoxId,
        virtual: !!a,
        show: p,
        data: d,
        focusedIndex: I,
        value: c,
        textField: e,
        valueField: t,
        groupField: this.props.groupField,
        groupMode: this.props.groupMode,
        isMultiColumn: this.props.isMultiColumn,
        optionsGuid: s.guid,
        listRef: (b) => {
          o.list = this.base.list = b, this.itemHeight = 0;
        },
        wrapperStyle: this.state.windowWidth && this.state.windowWidth > D ? { maxHeight: r.height } : {},
        wrapperCssClass: E(
          "k-list-content",
          {
            "k-list-scroller": !a
          }
        ),
        listStyle: o.enabled ? { transform: g } : void 0,
        key: "listkey",
        skip: h,
        onClick: this.handleItemClick,
        itemRender: i,
        groupHeaderItemRender: l,
        noDataRender: n,
        onMouseDown: (b) => b.preventDefault(),
        onScroll: this.onScroll,
        wrapperRef: o.scrollerRef,
        scroller: this.base.renderScrollElement(),
        ariaSetSize: a.total
      }
    );
  }
  renderSearchBar(s, e, t) {
    const {
      tabIndex: n,
      disabled: i,
      data: l = [],
      dataItemKey: d,
      virtual: a = { skip: 0 }
    } = this.props, r = this.props.opened !== void 0 ? this.props.opened : this.state.opened, o = this.value, h = Math.max(0, l.findIndex((p) => C(p, o, d)));
    return this._suggested && !C(this._valueOnDidUpdate, o, d) && (this._suggested = ""), /* @__PURE__ */ u.createElement(
      ue,
      {
        id: e,
        readOnly: r && this.mobileMode,
        placeholder: t,
        tabIndex: n,
        title: this.props.title,
        accessKey: this.props.accessKey,
        value: s + this._suggested,
        suggestedText: this._suggested,
        ref: (p) => this._input = p && p.input,
        onClick: this.onInputClick,
        onKeyDown: this.onInputKeyDown,
        onChange: this.inputOnChange,
        onFocus: this.base.handleFocus,
        onBlur: this.handleBlur,
        disabled: i,
        expanded: r,
        owns: this.base.listBoxId,
        activedescendant: `option-${this.base.guid}-${h + a.skip}`,
        role: "combobox",
        ariaLabelledBy: this.props.ariaLabelledBy,
        ariaDescribedBy: this.props.ariaDescribedBy,
        ariaRequired: this.required,
        render: this.props.valueRender
      }
    );
  }
  clearValue() {
    const s = this.base.initState();
    this._suggested = "", this.base.filterChanged("", s), this.props.filter === void 0 && this.state.text !== void 0 && (s.data.text = void 0), this.triggerOnChange(null, s);
    const e = this.props.opened !== void 0 ? this.props.opened : this.state.opened, t = this.mobileMode;
    e && !t && this.base.togglePopup(s), this.applyState(s);
  }
  triggerOnChange(s, e) {
    const t = this.value;
    !k(t) && !k(s) || C(t, s, this.props.dataItemKey) || (this.props.value === void 0 && (e.data.value = s), this._valueDuringOnChange = s, e.events.push({ type: "onChange" }));
  }
  getFocusedIndex() {
    const s = this.value, { data: e = [], textField: t, dataItemKey: n, virtual: i = { skip: 0 }, focusedItemIndex: l = K, skipDisabledItems: d } = this.props, a = this.props.filter ? this.props.filter : this.state.text;
    return k(s) && a === void 0 ? e.findIndex((r) => C(r, s, n)) : a ? l(e, a, t) : d && t && !a && i.skip === 0 ? e.findIndex((r) => !r.disabled && r[t]) : i.skip === 0 ? 0 : -1;
  }
  suggestValue(s) {
    const { data: e, textField: t } = this.props;
    this._suggested = he(s, e, t);
  }
  applyState(s) {
    this.base.applyState(s), this._valueDuringOnChange = void 0;
  }
  calculateMedia(s) {
    for (const e of s)
      this.setState({ windowWidth: e.target.clientWidth });
  }
};
w.displayName = "ComboBox", w.propTypes = {
  ...B.propTypes,
  size: f.oneOf([null, "small", "medium", "large"]),
  rounded: f.oneOf([null, "small", "medium", "large", "full"]),
  fillMode: f.oneOf([null, "solid", "flat", "outline"]),
  dataItemKey: f.string,
  groupField: f.string,
  groupMode: f.oneOf([void 0, "classic", "modern"]),
  isMultiColumn: f.bool,
  suggest: f.bool,
  placeholder: f.string,
  title: f.string,
  allowCustom: f.bool,
  clearButton: f.bool,
  iconClassName: f.string,
  svgIcon: oe,
  validationMessage: f.string,
  required: f.bool,
  id: f.string,
  ariaLabelledBy: f.string,
  ariaDescribedBy: f.string,
  list: f.any,
  valueRender: f.func,
  skipDisabledItems: f.bool
}, w.defaultProps = {
  ...B.defaultProps,
  size: "medium",
  rounded: "medium",
  fillMode: "solid",
  allowCustom: !1,
  clearButton: !0,
  required: !1,
  groupMode: "modern",
  isMultiColumn: !1,
  skipDisabledItems: !0,
  prefix: void 0,
  suffix: void 0
};
let T = w;
const we = ne(), Ee = le(re(we, T));
Ee.displayName = "KendoReactComboBox";
export {
  Ee as ComboBox,
  we as ComboBoxPropsContext,
  T as ComboBoxWithoutContext
};
